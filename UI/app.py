from flask import Flask, jsonify, request, send_file
import subprocess
from flask_cors import CORS
import os

app = Flask(__name__)

CORS(app)

@app.route('/run_pipeline', methods=['POST'])
def run_pipeline():
    """
    Pipeline that:
    1. Accepts latitude, longitude, and radius from the frontend.
    2. Runs `data_train.py` with these inputs.
    3. Runs `model.py` to process the data and create a plot.
    4. Returns the plot to the frontend.
    """
    try:
        # Step 1: Get latitude, longitude, and radius from the frontend
        data = request.json
        print(f"Received JSON from frontend: {data}")  # Log the input data to the console
        
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        radius = data.get('radius')

        # Validate the input
        if latitude is None or longitude is None or radius is None:
            print("Error: Missing latitude, longitude, or radius in the request")
            return jsonify({"error": "Missing latitude, longitude, or radius in request"}), 400

        # Step 2: Run data_train.py with the inputs
        print("Running data_train.py...")  # Log script execution
        subprocess.run(["python", "data_train.py", str(latitude), str(longitude), str(radius)], check=True)

        # Verify the output file of data_train.py exists
        if not os.path.exists("updated_data.csv"):
            print("Error: data_train.py did not produce updated_data.csv")
            return jsonify({"error": "data_train.py did not produce updated_data.csv"}), 500

        # Step 3: Run model.py
        print("Running model.py...")  # Log script execution
        subprocess.run(["python", "model.py"], check=True)

        # Verify the output file of model.py exists
        graph_image_path = "output_graph.png"  # Adjust path if model.py uses a different name
        if not os.path.exists(graph_image_path):
            print("Error: model.py did not produce output_graph.png")
            return jsonify({"error": "model.py did not produce output_graph.png"}), 500

        print("Pipeline executed successfully.")
        return jsonify({"message": "Pipeline executed successfully", "graph_image": "/get_graph"})

    except subprocess.CalledProcessError as e:
        print(f"Pipeline failed with error: {e}")
        return jsonify({"error": f"Pipeline failed: {str(e)}"}), 500

@app.route('/get_graph', methods=['GET'])
def get_graph():
    """
    Serve the graph image generated by model.py.
    """
    graph_image_path = "output_graph.png"  # Adjust to the correct path
    if os.path.exists(graph_image_path):
        print("Serving the generated graph image to the frontend.")
        return send_file(graph_image_path, mimetype='image/png')
    print("Error: Graph image not found")
    return jsonify({"error": "Graph image not found"}), 404

if __name__ == '__main__':
    print("Starting Flask server...")
    app.run(debug=True)
